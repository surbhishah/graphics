package lines;

import graphics.Point;

import java.awt.Color;
import java.awt.Graphics;

public class Line {

	protected Point p1;
	protected Point p2;
	protected Color color;

	public Line(Point p1, Point p2) {
		this.p1 = p1;
		this.p2 = p2;
		this.color = Color.BLUE;// Default color
	}

	public Line(Point p1, Point p2, Color color) {
		this.p1 = p1;
		this.p2 = p2;
		this.color = color;// Default color
	}

	public Line(int x1, int y1, int x2, int y2) {
		p1 = new Point(x1, y1);
		p2 = new Point(x2, y2);
		this.color = Color.BLUE;// Default color
	}

	public Line(Point p1, Point p2, int thickness, Color color) {
		this(p1, p2);
		this.color = color;
	}

	public Line(int x1, int y1, int x2, int y2, int thickness, Color color) {
		this(x1, y1, x2, y2);
		this.color = color;
	}

	public Point getP1() {
		return this.p1;
	}

	public Point getP2() {
		return this.p2;
	}

	public double getSlope() throws ArithmeticException {
		return ((double) p1.y - p2.y) / ((double) p1.x - p2.x);
	}

	public Color getColor() {
		return this.color;
	}

	public void drawLine(Point center, Graphics g, LineDrawingAlgorithm algo) {
		Point virtualCenter;
		// I am shifting the center to one of the end points of the line
		// so that one point will be (0,0)
		p1 = p1.translate(center);
		p2 = p2.translate(center);
		if (p1.x < p2.x) {
			virtualCenter = p1;
		} else {
			virtualCenter = p2;
		}
		p1 = p1.translateAxesFromStandard(virtualCenter);
		p2 = p2.translateAxesFromStandard(virtualCenter);
		algo.drawLine(this, virtualCenter, g);
		p1 = p1.translate(virtualCenter);
		p2 = p2.translate(virtualCenter);
		p1 = p1.translateAxesFromStandard(center);
		p2 = p2.translateAxesFromStandard(center);
		int x=0;
		
	}

	public void drawPoint(Point point, Graphics g, Point center) {
		point.translateAndDrawPoint(g, center, color);
	}
}

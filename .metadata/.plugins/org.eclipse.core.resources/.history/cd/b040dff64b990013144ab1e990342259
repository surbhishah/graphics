import graphics.AxesUtility;
import graphics.Point;

import java.awt.Color;
import java.awt.Graphics;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

import javax.swing.JApplet;

import algorithms.CircleDrawingAlgorithm;
import algorithms.DirectEquationUse;
import circle.Circle;

@SuppressWarnings("serial")
public class CircleApplet extends JApplet {

	@Override
	public void paint(Graphics g) {
		Point coordinateCenter = new Point(400, 400);
		AxesUtility.drawCoordinateSystem(this, g, Color.BLACK, 100,
				coordinateCenter);
		AxesUtility.drawAxes(this, g, coordinateCenter, Color.RED);
		CircleDrawingAlgorithm algo = new DirectEquationUse();
		Circle circles[] = { new Circle(new Point(-300, 0), 20),
				new Circle(new Point(-200, 0), 50),
				new Circle(new Point(0, 0), 100) };

		perfEvaluate(circles, algo, coordinateCenter, g);
		Circle circles[] = { new Circle(new Point(-300, 0), 20),
				new Circle(new Point(-200, 0), 50),
				new Circle(new Point(0, 0), 100) };

		perfEvaluate(circles, algo, coordinateCenter, g);

		//
		perfEvaluate(algo, coordinateCenter, g);
		// algo = new BresenhemAlgorithm();
		// perfEvaluate(algo, coordinateCenter, g);
		// algo = new MidPointAlgorithm();
		// perfEvaluate(algo, coordinateCenter, g);

	}

	void perfEvaluate(Circle circles[], CircleDrawingAlgorithm algo,
			Point coordinateCenter, Graphics g) {
		try {
			long startTime = System.nanoTime();
			for (Circle circle : circles) {
				circle.drawCircle(algo, g, coordinateCenter);

			}
			long estimatedTime = System.nanoTime() - startTime;
			BufferedWriter out = new BufferedWriter(new FileWriter(
					"/home/surbhi/Documents/PerfEvaluation.txt", true));
			out.write("\n" + algo.getClass() + ":" + estimatedTime
					/ circles.length + "\n");
			out.close();

		} catch (IOException ex) {
			System.out.println(ex.getMessage());
		}

	}

	public static void function(String args[]) {
	}

}
